#include <L3G.h>
#include <LPS.h>
#include <LSM303.h>
#include <Wire.h>

L3G gyro;
LPS ps;
LSM303 compass;

int AN[6], SENSOR_SIGN[9], AN_OFFSET[6];
int gyro_x, gyro_y, gyro_z;
int accel_x, accel_y, accel_z;
int magnetom_x, magnetom_y, magnetom_z;
float pressure, altitude, temperature;

void I2C_Init()
{
  Wire.begin();
}

void Gyro_Init()
{
  /*gyro.init();
  gyro.writeReg(L3G_CTRL_REG4, 0x20); // 2000 dps full scale
  gyro.writeReg(L3G_CTRL_REG1, 0x0F); // normal power mode, all axes enabled, 100 Hz*/
  if (!gyro.init())
  {
    Serial.println("Failed to autodetect gyro type!");
    while (1);
  }

  gyro.enableDefault();
}

void PS_Init()
{
  if (!ps.init())
  {
    Serial.println("Failed to autodetect pressure sensor!");
    while (1);
  }

  ps.enableDefault(); 
}

void Read_PS()
{
  pressure = ps.readPressureInchesHg(); 
  altitude = ps.pressureToAltitudeFeet(pressure);
  temperature = ps.readTemperatureF(); 
  
}

void Read_Gyro()
{
  gyro.read();
  
  AN[0] = gyro.g.x;
  AN[1] = gyro.g.y;
  AN[2] = gyro.g.z;
  gyro_x = AN[0]; //SENSOR_SIGN[0] * (AN[0] - AN_OFFSET[0]);
  gyro_y = AN[1]; //SENSOR_SIGN[1] * (AN[1] - AN_OFFSET[1]);
  gyro_z = AN[2]; //SENSOR_SIGN[2] * (AN[2] - AN_OFFSET[2]);
}

void Accel_Init()
{
  compass.init();
  compass.enableDefault();
  
  /*switch (compass.getDeviceType())
  {
    case LSM303::device_D:
      compass.writeReg(LSM303::CTRL2, 0x18); // 8 g full scale: AFS = 011
      break;
    case LSM303::device_DLHC:
      compass.writeReg(LSM303::CTRL_REG4_A, 0x28); // 8 g full scale: FS = 10; high resolution output mode
      break;
    default: // DLM, DLH
      compass.writeReg(LSM303::CTRL_REG4_A, 0x30); // 8 g full scale: FS = 11
  }*/
}

// Reads x,y and z accelerometer registers
void Read_Accel()
{
  compass.readAcc();
  
  AN[3] = compass.a.x >> 4; // shift left 4 bits to use 12-bit representation (1 g = 256)
  AN[4] = compass.a.y >> 4;
  AN[5] = compass.a.z >> 4;
  accel_x = AN[3]; //SENSOR_SIGN[3] * (AN[3] - AN_OFFSET[3]);
  accel_y = AN[4]; //SENSOR_SIGN[4] * (AN[4] - AN_OFFSET[4]);
  accel_z = AN[5]; //SENSOR_SIGN[5] * (AN[5] - AN_OFFSET[5]);
}

void Compass_Init()
{
  // doesn't need to do anything because Accel_Init() should have already called compass.enableDefault()
}

void Read_Compass()
{
  compass.readMag();
  
  magnetom_x = compass.m.x; //SENSOR_SIGN[6] * compass.m.x;
  magnetom_y = compass.m.y; //SENSOR_SIGN[7] * compass.m.y;
  magnetom_z = compass.m.z; //SENSOR_SIGN[8] * compass.m.z;
}

void setup() {
  // initialize digital pin 13 as an output.
  pinMode(13, OUTPUT);
  
  //Setup serial logging
  Serial.begin(9600);
  I2C_Init();
  
  Serial.println("Initializing Gyro");
  Gyro_Init();
  Serial.println("Initializing PS");
  PS_Init();
  Serial.println("Initializing Accelerometer");
  Accel_Init();
  Serial.println("Initializing Compass");
  Compass_Init();
  delay(1000);
}

// the loop function runs over and over again forever
void loop() {
  /*digitalWrite(13, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(1000);              // wait for a second
  digitalWrite(13, LOW);    // turn the LED off by making the voltage LOW
  delay(1000);              // wait for a second
  */
  
  Read_Gyro();
  Serial.print("Gyro: ");
  Serial.print(gyro_x);
  Serial.print(" ");
  Serial.print(gyro_y);
  Serial.print(" ");
  Serial.println(gyro_z);

  Read_PS();
  Serial.print("Pres: ");
  Serial.print(pressure);
  Serial.print(" ");
  Serial.print("Alt: ");
  Serial.print(altitude);
  Serial.print(" ");
  Serial.print("Temp: ");
  Serial.println(temperature);  
  
  Read_Accel();
  Serial.print("Accel: ");
  Serial.print(accel_x);
  Serial.print(" ");
  Serial.print(accel_y);
  Serial.print(" ");
  Serial.println(accel_z);
  
  Read_Compass();
  Serial.print("Mag: ");
  Serial.print(magnetom_x);
  Serial.print(" ");
  Serial.print(magnetom_y);
  Serial.print(" ");
  Serial.println(magnetom_z);

  Serial.println();
  delay(5000);
}
